<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | ギッハブる日記]]></title>
  <link href="http://mattn.github.com/blog/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://mattn.github.com/blog/"/>
  <updated>2011-11-02T12:40:16+09:00</updated>
  <id>http://mattn.github.com/blog/</id>
  <author>
    <name><![CDATA[mattn]]></name>
    <email><![CDATA[mattn.jp@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[URLから本文を抜き出してblockquote作るプラグイン書いた]]></title>
    <link href="http://mattn.github.com/blog/2011/10/24/urlref/"/>
    <updated>2011-10-24T00:00:00+09:00</updated>
    <id>http://mattn.github.com/blog/2011/10/24/urlref</id>
    <content type="html"><![CDATA[<p>URLから自動で本文らしい所を抜き取って引用文にしてくれるプラグイン書いた。</p>

<p><code>
{&amp;#37; urlref https://github.com &amp;#37;}
</code></p>

<p>こう書くと</p>

<p><blockquote>
<a href="https://github.com ">GitHub - Social Coding</a>
<p>jQuery, reddit, Sparkle, curl, Ruby on Rails, node.js, ClickToFlash, Erlang/OTP, CakePHP, Redis, and many more
</p>
<cite>https://github.com </cite>
</blockquote>
</p>

<p>こんな感じ。楽チン。キャッシュ使って連続アクセスはしないようにした。</p>

<p><code>
{&amp;#37; urlref http://twitter.com/hasegawayosuke/ &amp;#37;}
</code></p>

<p>こんなのだと</p>

<p><blockquote>
<a href="http://twitter.com/hasegawayosuke/ ">Yosuke HASEGAWA (@hasegawayosuke)はTwitterを使っています</a>
<p>
</p>
<cite>http://twitter.com/hasegawayosuke/ </cite>
</blockquote>
</p>

<p>こんな感じだし</p>

<p><code>
{&amp;#37; urlref https://twitter.com/hasegawayosuke/status/127346935911821312 &amp;#37;}
</code></p>

<p>こんなのだと</p>

<p><blockquote>
<a href="https://twitter.com/hasegawayosuke/status/127346935911821312 ">Twitter / Yosuke HASEGAWA: 昨日に引き続き肉食べ過ぎて満腹。さぁ、大阪に帰ろう。</a>
<p>Twitter / Yosuke HASEGAWA: 昨日に引き続き肉食べ過ぎて満腹。さぁ、大阪に帰ろう。
</p>
<cite>https://twitter.com/hasegawayosuke/status/127346935911821312 </cite>
</blockquote>
</p>

<p>焼肉食べたい。</p>

<p><blockquote>
<a href="http://octopress.org/">Octopress</a>
<p>Octopress is a framework designed by Brandon Mathis for Jekyll, the blog aware static site generator powering Github Pages. To start blogging with Jekyll, you have to write your own HTML templates, CS...
</p>
<cite>http://octopress.org/</cite>
</blockquote>
</p>

<p>octopressにpull request送ったけど、取り入れられるかどうかは知らない。</p>

<p>```ruby
#</p>

<h1>Author: Yasuhiro Matsumoto</h1>

<h1>Include reference of text.</h1>

<p>#</p>

<h1>Outputs a string with a given URL</h1>

<p>#</p>

<h1>{&#37; urlref http://google.com/search?q=pants &#37;}</h1>

<h1>...</h1>

<h1><blockquote></h1>

<h1><a href="http://google.com/search?q=pants">The Search For Bobby's Pants</p></h1>

<h1><p>...</p></h1>

<h1><cite><a href="http://google.com/search?q=pants">The Search For Bobby's Pants</a></cite></h1>

<h1></blockquote></h1>

<p>#
require 'cgi'
require 'digest/md5'
require 'net/https'
require 'uri'
require 'iconv'</p>

<p>module Jekyll</p>

<p>  class UrlRef &lt; Liquid::Tag</p>

<pre><code>def initialize(tag_name, args, tokens)
  super
  if pair = args.match(/(\S+)\s+([\d\.]+)/)
    @url = pair[1].strip
    @per = pair[2].strip.to_f
  else
    @url = args
    @per = 0.1
  end
  @cache_disabled = false
  @cache_folder   = File.expand_path "../.urlref-cache", File.dirname(__FILE__)
  FileUtils.mkdir_p @cache_folder
end

def render(context)
  if text = get_cached_text(@url, @per) || get_text_from_url(@url, @per)
    lines = text.split(/\n/, 3)
    title = CGI.escapeHTML lines[1]
    body = CGI.escapeHTML lines[2]
    &lt;&lt;-HTML
</code></pre>

<blockquote>
<a href="#{@url}">#{title}</a>
<p>#{body}</p>
<cite>#{@url}</cite>
</blockquote>


<pre><code>    HTML
  else
    ""
  end
end

def cache(url, text, per)
  cache_file = get_cache_file_for url, per
  File.open(cache_file, "w") do |io|
    io.write text
  end
end

def get_cached_text(url, per)
  return nil if @cache_disabled
  cache_file = get_cache_file_for url, per
  File.read cache_file if File.exist? cache_file
end

def get_cache_file_for(url, per)
  md5 = Digest::MD5.hexdigest url
  File.join @cache_folder, "#{md5}-#{per}.cache"
end

def decode_html(s)
  s = s.gsub(/&lt;[^&gt;]*?&gt;/, "")
  s = s.gsub("&amp;#39;", "'")
  s = s.gsub("&amp;#39;", "'")
  s = s.gsub("&amp;quot;", "\"")
  s = s.gsub("&amp;lt;", "&lt;")
  s = s.gsub("&amp;gt;", "&gt;")
  s = s.gsub("&amp;nbsp;", " ")
  s = s.gsub("&amp;laquo;", "&lt;&lt;")
  s = s.gsub("&amp;raquo;", "&gt;&gt;")
  s = s.gsub("&amp;copy;", "(C)")
  s = s.gsub("&amp;amp;", "&amp;")
  s
end

def get_text_from_url(url, threshold_per)
  raw_uri = URI.parse url
  proxy = ENV['http_proxy']
  if proxy
    proxy_uri = URI.parse proxy
    http = Net::HTTP::Proxy(proxy_uri.host, proxy_uri.port).new raw_uri.host, raw_uri.port
  else
    http = Net::HTTP.new raw_uri.host, raw_uri.port
  end
  if raw_uri.scheme == 'https'
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  end
  request = Net::HTTP::Get.new raw_uri.request_uri
  data = http.request request
  data = data.body
  data.gsub!(/&lt;!--.*?--&gt;/, '')
  data.gsub!(/[\t\r\n]/, ' ')
  title = data.match(/&lt;title[^&gt;]*?&gt;(.*?)&lt;\/title&gt;/i)
  title = title ? title[1] : ''
  title = decode_html title
  data.gsub!(/&lt;(script|style)[^&gt;]*&gt;.*?&lt;\/\1&gt;/, '')
  max = 0
  body = ''
  data.split(/(&lt;td[^&gt;]*?&gt;)|(&lt;\/td&gt;)|(&lt;div[^&gt;]*?&gt;)|(&lt;\/div&gt;)/).each do |html|
    text = decode_html html.dup
    text.strip!
    text.gsub!(/[\s\t\r\n]+/, " ")
    next if text == "" 
    l = text.length
    if l &gt; 100
      per = l.to_f / html.length
      if max &lt; l and per &lt; threshold_per
        max = l
        body = text.strip
      end
    end
  end
  if body.length &gt; 200
    body = "#{body.slice(0, 200)}..."
  end
  text = "#{url}\n#{title}\n#{body}\n"
  text = Iconv.new('UTF-8//IGNORE', 'UTF-8').iconv(text)
  cache url, text, threshold_per unless @cache_disabled
  text
end
</code></pre>

<p>  end
end</p>

<p>Liquid::Template.register_tag('urlref', Jekyll::UrlRef)
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「githubとjekyllとoctopressで作る簡単でモダンなブログ」をmarkdownで書き直してみた]]></title>
    <link href="http://mattn.github.com/blog/2011/10/18/octopress-awesome/"/>
    <updated>2011-10-18T00:00:00+09:00</updated>
    <id>http://mattn.github.com/blog/2011/10/18/octopress-awesome</id>
    <content type="html"><![CDATA[<p>自分で書いた記事だけど...</p>

<p>Liquid error: undefined method `map' for #<String:0x2232810></p>

<p>を実際にoctopressで書くと、どんな感じかやってみた。
まぁblosxomのテキストをmarkdownに書き直しただけなんですが。
一番下に、markdownにした場合のテキストを貼り付けてあります。</p>

<hr />

<p>以前、「jekyllで始める簡単ブログ」という記事を書いたのですが</p>

<p>Liquid error: undefined method `map' for #<String:0x2232450></p>

<p>octopressというのを使うともっと簡単に出来る事が分かった。</p>

<p>Liquid error: undefined method `map' for #<String:0x2232120></p>

<p>Liquid error: undefined method `map' for #<String:0x2231d48></p>

<p>以下簡単な手順を示す。
このgithubリポジトリは基本的に、1ブログに対して1つcloneする。cloneしたら</p>

<p>```</p>

<h1>rake install</h1>

<p>```</p>

<p>する。octopressをシステムにインストールのではなく、このブログ用リポジトリにsassテーマをキャッシュさせる為の設定を行うだけなので安心してやって貰ってok。
次にgithubにブログを作るのであれば</p>

<p>```</p>

<h1>rake setup_github_pages</h1>

<p>```</p>

<p>を実行し、読み取り書き込み権限のあるgit URLを貼り付けて完了。
Windowsの場合はちょっとここで修正が必要で、<code>config.rb</code>とか<code>Rakefile</code>に変なパスが書かれているので直す。実際には<code>public/c:/path/to/public...</code>みたいなフルパスが重なっているはずなので<code>public...</code>に直せばok。
これについては時間があったらパッチ書いてpull requestを送るつもり。</p>

<p>さて、これでブログを書く準備が出来ました。簡単すぎますね！</p>

<p>試しに<code>source/_posts/2011-10-17-github-jekyll.mkd</code>というmarkdownのファイルを作ります。中身は以前ご紹介した内容と変わりませんが、ocotopressは幾らか拡張プラグインが入っているので色んな書き方が出来ます。
例えばgist tagプラグインを使って</p>

<h2>```</h2>

<p>layout: post
title: "githubとjekyllとoctopressで作るブログ"
date: 2011-07-03 5:59
comments: true</p>

<h2>categories:</h2>

<p>便利すぎる...</p>

<p>{&#37; gist 1292428 &#37;}
```</p>

<p>こう書いて</p>

<p>```</p>

<h1>rake gen_deploy</h1>

<p>```</p>

<p>すると</p>

<p>こんな記事が出来上がります。dateはファイル名じゃなくてdateの方が(設定されていれば)優先されるみたいですね。以後は記事を書いて<code>rake den_deploy</code>するだけの簡単なお仕事です。
他にも、imageタグや、haml形式入力、html5 videoタグなど、色んなプラグインがあります。また、sassフォルダ内にあるsassファイルを弄れば簡単しかも柔軟なCSSを吐き出せます。
なお、<code>_config.xml</code>を弄ってタイトルやサブタイトル、githubアカウント、twitterアカウントなんかを設定すると上述の様なサイトが簡単に出来上がります。</p>

<p>```</p>

<h1>-----------------------</h1>

<h1>Main Configs</h1>

<h1>-----------------------</h1>

<p>url: http://mattn.github.com/blog
title: "ギッハブる日記"
subtitle: ギッハブで作る開発日誌
author: mattn
```</p>

<p>気をつけておいて欲しいのは、github/jekyllはCGIで動いている訳じゃなくて、octopressが静的コンテンツを生成しているので、記事をアップする環境に依存する事。まぁここはbundleを使っているのでOSさえ変わらなければ大丈夫かと思います。Windowsからでも既述の様な修正を入れれば使えています。無料のgithubで簡単にしかもモダンなブログサイトを作りたい方は、一考してみてはどうでしょうか。</p>

<hr />

<p>以上が本文、でこのmarkdownのソースは以下。</p>

<p><div><script src='https://gist.github.com/1295049.js?file='></script>
<noscript><pre><code>以前、「jekyllで始める簡単ブログ」という記事を書いたのですが

{% blockquote Big Sky http://mattn.kaoriya.net/software/lang/ruby/20090409185248.htm Big Sky :: Jekyllで始める簡単ブログ %}
GithubのユーザページでJekyllが使われる様になりました。 GitHub Pages Upgraded to Jekyll 0.5.0 - GitHub I just released Jek...
{% endblockquote %}

octopressというのを使うともっと簡単に出来る事が分かった。

{% blockquote Ocotopress http://octopress.org Octopress %}
Octopress is a framework designed by Brandon Mathis for Jekyll , the blog aware static site generato...
{% endblockquote %}

{% blockquote image/octopress https://github.com/imathis/octopress imathis/octopress - GitHub %}
What is Octopress? Octopress is Jekyll blogging at its finest. Octopress sports a clean responsive t...
{% endblockquote %}

以下簡単な手順を示す。
このgithubリポジトリは基本的に、1ブログに対して1つcloneする。cloneしたら

```
# rake install
```

する。octopressをシステムにインストールのではなく、このブログ用リポジトリにsassテーマをキャッシュさせる為の設定を行うだけなので安心してやって貰ってok。
次にgithubにブログを作るのであれば

```
# rake setup_github_pages
```

を実行し、読み取り書き込み権限のあるgit URLを貼り付けて完了。
Windowsの場合はちょっとここで修正が必要で、`config.rb`とか`Rakefile`に変なパスが書かれているので直す。実際には`public/c:/path/to/public...`みたいなフルパスが重なっているはずなので`public...`に直せばok。
これについては時間があったらパッチ書いてpull requestを送るつもり。

さて、これでブログを書く準備が出来ました。簡単すぎますね！

試しに`source/_posts/2011-10-17-github-jekyll.mkd`というmarkdownのファイルを作ります。中身は以前ご紹介した内容と変わりませんが、ocotopressは幾らか拡張プラグインが入っているので色んな書き方が出来ます。
例えばgist tagプラグインを使って

```
---
layout: post
title: &quot;githubとjekyllとoctopressで作るブログ&quot;
date: 2011-07-03 5:59
comments: true
categories:
---
便利すぎる...

{&amp;#37; gist 1292428 &amp;#37;}
```

こう書いて

```
# rake gen_deploy
```

すると

こんな記事が出来上がります。dateはファイル名じゃなくてdateの方が(設定されていれば)優先されるみたいですね。以後は記事を書いて&lt;code&gt;rake den_deploy&lt;/code&gt;するだけの簡単なお仕事です。
他にも、imageタグや、haml形式入力、html5 videoタグなど、色んなプラグインがあります。また、sassフォルダ内にあるsassファイルを弄れば簡単しかも柔軟なCSSを吐き出せます。
なお、`_config.xml`を弄ってタイトルやサブタイトル、githubアカウント、twitterアカウントなんかを設定すると上述の様なサイトが簡単に出来上がります。

```
# ----------------------- #
#      Main Configs       #
# ----------------------- #

url: http://mattn.github.com/blog
title: &quot;ギッハブる日記&quot;
subtitle: ギッハブで作る開発日誌
author: mattn
```

気をつけておいて欲しいのは、github/jekyllはCGIで動いている訳じゃなくて、octopressが静的コンテンツを生成しているので、記事をアップする環境に依存する事。まぁここはbundleを使っているのでOSさえ変わらなければ大丈夫かと思います。Windowsからでも既述の様な修正を入れれば使えています。無料のgithubで簡単にしかもモダンなブログサイトを作りたい方は、一考してみてはどうでしょうか。
</code></pre></noscript></div>
</p>

<p>しかしgist tagプラグイン便利だ。</p>
]]></content>
  </entry>
  
</feed>
